sources:
  - name: LogicaHealth Sandbox v3
    handler:
      fhir:
        endpoint: https://api.logicahealth.org/PatientCloud10STU3/open

additionalTypeDefs: |
  enum PeriodInterval {
    MONTH
    WEEK
  }
  input TimeInterval {
    interval: PeriodInterval!
    limit: Int
  }
  enum OrderDirection {
    ASC
    DESC
  }
  type TinyMedicationResponse {
    """
    Name of the Medication being prescribed. From the FHIR MedicationStatement Resource. Maps to entry.resource.medicationCodeableConcept.text.
    """
    MedicationName: String 
    """
    Patient instructions for taking medication. Connecting together relevant information from MedicationRequest resource: dosageInstruction.text + ' ' + dispenseRequest.quantity.unit + '. Starting on  ' + date(dosageInstruction.timing.repeat.boundsPeriod.start, "MMMM Do, YYYY") + ', ' + dispenseRequest.quantity.value + ' ' + dispenseRequest.quantity.unit + 's (supply for '+ expectedSupplyDuration.value + ' ' + expectedSupplyDuration.unit + ').'
    """
    Instructions: String
    """
    All fields available in original FHIR resource. JSON object using flattened name for parameter variable. E.g. "Fields": { "dosageInstruction.text": "1 daily", "medicationCodeableConcept.coding.code": "316133"}
    """
    Fields(fields: [String]): JSON
    """
    Start Date for taking medication from MedicationRequest resource. Using Moment.js for formatting. date(dosageInstruction.timing.repeat.boundsPeriod.start, "DD/MM/YYYY")
    """
    StartDate: String
  }
  """
  Stats for selected Time Period
  """
  type PeriodStat {
    """
    Mean observation value for that month or week (searches entry.resource.valueQuantity.value)
    """
    AVGMeanValue: Float
    DateNumber: String
    """
    (Month, Year) or (Week, Year) (searches entry.resource.effectiveDateTime) 
    """
    DateLabel: String
  }
  """
  Stats for overall time period
  """
  type AllTimeStat {
    """
    Searches for all observation values in the system and returns highest (best) value for peak flow.
    """
    BestValue: Float
    """
    Creates a value equal to 80% of the best value. Used to create an orange warning.
    """
    EIGHTYPCBestValue: Float
    """
    Creates a value equal to 50% of the best value. Used to create a red warning.
    """
    FIFTYPCBestValue: Float
    """
    Average overall Mean Value
    """
    AVGMeanValue: Float
  }
  type TinyPeakFlowResponse {
    statsForPeriod(order: OrderDirection): [PeriodStat]
    statsAllTime: AllTimeStat
  }
  extend type Query {
    TinyMedicationRequest(PatientID: String!, dates: String): [TinyMedicationResponse]
    TinyPeakFlowStats(PatientID: String!, date_range: TimeInterval!): TinyPeakFlowResponse
  }
additionalResolvers:
  - ./src/tinyMedicationRequest.js
  - ./src/tinyPeakFlowStats.js

serve:
  exampleQuery: ./example-queries/*.graphql
  port: ${PORT?}
  cors:
    origin:
      - "*"
    allowedHeaders:
      - "Origin"
      - "Content-Type"
      - "Authorization"
      - "Partner-Company"
      - "X-Requested-With"
    exposedHeaders:
      - "access-control-allow-headers"
      - "access-control-allow-methods"
      - "access-control-allow-origin"
      - "content-type"
